// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users (username, password, email, full_name)
values ($1,$2,$3,$4)
returning username, password, email, created_at, password_updated_at, full_name
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
	FullName string `json:"full_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.FullName,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
		&i.FullName,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
select username, password, email, created_at, password_updated_at, full_name from users
where username=$1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
		&i.FullName,
	)
	return i, err
}

const updateUserData = `-- name: UpdateUserData :one
UPDATE users
SET username = $1,
    full_name = $2,
    email = $3
WHERE username = $1
RETURNING username, password, email, created_at, password_updated_at, full_name
`

type UpdateUserDataParams struct {
	Username string `json:"username"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
}

func (q *Queries) UpdateUserData(ctx context.Context, arg UpdateUserDataParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserData, arg.Username, arg.FullName, arg.Email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
		&i.FullName,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password = $1,
    password_updated_at = now()
WHERE username=$2
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.Username)
	return err
}
